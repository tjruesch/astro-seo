---
import OpenGraphArticleTags from "./components/OpenGraphArticleTags.astro";
import OpenGraphBasicTags from "./components/OpenGraphBasicTags.astro";
import OpenGraphImageTags from "./components/OpenGraphImageTags.astro";
import OpenGraphOptionalTags from "./components/OpenGraphOptionalTags.astro";
import ExtendedTags from "./components/ExtendedTags.astro";
import TwitterTags from "./components/TwitterTags.astro";

export type TwitterCardType = "summary" | "summary_large_image" | "app" | "player";

export interface Link extends HTMLLinkElement {
  prefetch: boolean;
  crossorigin: string;
}

export interface Meta extends HTMLMetaElement {
  property: string;
}

export interface Props {
  title?: string;
  titleTemplate?: string;
  titleDefault?: string;
  charset?: string;
  description?: string;
  canonical?: string;
  nofollow?: boolean;
  noindex?: boolean;
  noarchive?: boolean;
  openGraph?: {
    basic: {
      title: string;
      type: string;
      image: string;
      url?: string;
    };
    optional?: {
      audio?: string;
      description?: string;
      determiner?: string;
      locale?: string;
      localeAlternate?: string[];
      siteName?: string;
      video?: string;
    };
    image?: {
      url?: string;
      secureUrl?: string;
      type?: string;
      width?: number;
      height?: number;
      alt?: string;
    };
    article?: {
      publishedTime?: string;
      modifiedTime?: string;
      expirationTime?: string;
      authors?: string[];
      section?: string;
      tags?: string[];
    };
  };
  twitter?: {
    card?: TwitterCardType;
    site?: string;
    creator?: string;
    title?: string;
    description?: string;
    image?: string;
    imageAlt?: string;
  };
  extend?: {
    link?: Partial<Link>[];
    meta?: Partial<Meta>[];
  };
}

const { props } = Astro;
const { title, titleTemplate, titleDefault, description, canonical, noindex, nofollow, noarchive, charset } = props;

function validateProps(props) {
  const { openGraph, description } = props;

  if (openGraph) {
    if (
      !openGraph.basic ||
      openGraph.basic.title == null ||
      openGraph.basic.type == null ||
      openGraph.basic.image == null
    ) {
      throw new Error(
        "If you pass the openGraph prop, you have to at least define the title, type, and image basic properties!"
      );
    }
  }

  if (openGraph?.basic?.image && !openGraph?.image?.alt) {
    console.warn(
      "WARNING(astro-seo): You defined `openGraph.basic.image`, but didn't define `openGraph.image.alt`. This is stongly discouraged.'"
    );
  }
}

validateProps(props);

let updatedTitle = '';

if (title) {
  updatedTitle = title;
  if (titleTemplate) {
    updatedTitle = titleTemplate.replace(/%s/g, updatedTitle);
  }
} else if (titleDefault) {
  updatedTitle = titleDefault;
}

---

{updatedTitle ? <title set:html={updatedTitle} /> : null}

{charset ? <meta charset={charset} /> : null}

<link rel="canonical" href={canonical || Astro.url.href} />

{description ? <meta name="description" content={description} /> : null}

<meta
  name="robots"
  content={`${
    noindex ? "noindex" : "index"
  }, ${
    nofollow ? "nofollow" : "follow"
  }${
    noarchive ? ", noarchive" : ""
  }`}
/>

{props.openGraph && <OpenGraphBasicTags {...props} />}
{props.openGraph?.optional && <OpenGraphOptionalTags {...props} />}
{props.openGraph?.image && <OpenGraphImageTags {...props} />}
{props.openGraph?.article && <OpenGraphArticleTags {...props} />}
{props.twitter && <TwitterTags {...props} />}
{props.extend && <ExtendedTags {...props} />}
